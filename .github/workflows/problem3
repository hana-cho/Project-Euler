# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest



#Problem 3: 
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?




#n is the number we are observing. In this case, 600851475143.

def largest_prime(n): 
	#start with the smallest prime. i =2.
	i = 2
	#case 1:the biggest possible prime factor is <= sqrt n.
	while i <= n**(1/2):
		#n%i==0 because i is a divisor of n
		#we divide n by i and therefore eliminate the prime number 
		#which is not the biggest
		while n % i == 0 and n / i > 1:
			n = n / i
		i += 1
	#case 2: the biggest possible prime factor is n itself (e.g. 7)
	if n > 1:
		return n
	#back to case 1
	else:
		#return i-1 instead of i
		#because i += 1 is out of the while loop
		return(i-1)

print(largest_prime(600851475143))
		
